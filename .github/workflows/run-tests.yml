name: Run Tests
on:
  push:
    branches:
      - "master"
      - "develop/*"
    tags:
      - "*"
  pull_request:
    branches:
      - "*"
jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      dockerhub-publish: ${{ steps.dockerhub-publish.outputs.defined }}
      registry: ghcr.io/${{ github.repository }}/container:${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.version'] }}
      container_tags: ${{ steps.docker_action_meta.outputs.tags }}
      container_labels: ${{ steps.docker_action_meta.outputs.labels }}
      container_buildtime: ${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.created'] }}
      container_version: ${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.version'] }}
      container_revision: ${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.revision'] }}
      container_base: ${{ fromJSON(steps.docker_action_meta.outputs.json).tags[0] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          persist-credentials: false
      - id: dockerhub-publish
        if: "${{ env.MY_KEY != '' }}"
        run: echo "::set-output name=defined::true"
        env:
          MY_KEY: ${{ secrets.DOCKER_PASS }}
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Semantic Release
        id: version
        uses: cycjimmy/semantic-release-action@v3.0.0
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @google/semantic-release-replace-plugin
            conventional-changelog-conventionalcommits
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: docker_action_meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ghcr.io/${{ github.repository }}/container
          tags: |
            type=sha,event=branch
            type=semver,pattern=s3proxy-{{version}}
            type=semver,pattern=s3proxy-{{major}}.{{minor}}
            type=semver,pattern=s3proxy-{{major}}
          labels: |
            org.opencontainers.image.licenses=Apache-2.0
  runTests:
    runs-on: ubuntu-latest
    needs: [meta]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      # These steps are quick and will work or if fail only because of external issues
      - uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "11"
          cache: "maven"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
      # - name: Install dependencies
      #   run: sudo apt-get install -y libevent-dev python3-pip python3-virtualenv

      #Run tests
      - name: Maven Package
        run: |
          mvn package -DskipTests
      - name: Maven Test
        run: |
          mvn test
      - name: Other Test
        run: |
          ./src/test/resources/run-s3-tests.sh

      #Store the target
      - uses: actions/upload-artifact@v2
        with:
          name: s3proxy
          path: target/s3proxy

  Containerize:
    runs-on: ubuntu-latest
    needs: [runTests, meta]
    steps:
      #Yes we need code
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: s3proxy
          path: target

      # These steps are quick and will work or if fail only because of external issues
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2.0.0
        if: github.event_name != 'pull_request' && needs.meta.outputs.dockerhub-publish == 'true'
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Login to DockerHub
        uses: docker/login-action@v2.0.0
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      #Generate Meta
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && needs.meta.outputs.dockerhub-publish == 'true' }}
          tags: ${{ needs.meta.outputs.container_base }}
          labels: ${{ needs.meta.outputs.container_labels }}
          build-args: |
            BUILDTIME=${{ needs.meta.outputs.container_buildtime }}
            VERSION=${{ needs.meta.outputs.container_version }}
            REVISION=${{ needs.meta.outputs.container_revision }}
          cache-from: type=registry,ref=${{ needs.meta.outputs.container_base }}
          cache-to: type=inline
